{
  "openapi": "3.0.3",
  "info": {
    "title": "LÃ¤nderspiel (nicht Fussball)",
    "description": "This API provides a trivia game that tests the players knowledge about countries.\nEach round of the game consists of different kind of questions. \nThe player answers the questions and earns points based on conditions, such as the amount of attempts that were needed. \nThe API keeps track of the players score.",
    "version": "4.20.0"
  },
  "tags": [
    {
      "name": "Game",
      "description": "Operations about the game"
    },
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "Ranking",
      "description": "Operations about ranking"
    },
    {
      "name": "Gamehistory",
      "description": "Operations about played games of a specific user."
    },
    {
      "name": "Profile",
      "description": "Operations about the public or private profile of a specific user."
    }
  ],
  "paths": {
    "/google/callback": {
      "get": {
        "summary": "Google callback endpoint",
        "tags": [
          "user"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Redirects to the login page with a token in the query parameter",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Username is already taken"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ranking/all-time": {
      "get": {
        "tags": [
          "Ranking"
        ],
        "summary": "Retrieve the top 10 users in all-time ranking",
        "description": "This endpoint returns the top 10 users with the highest all-time score, along with their user info.",
        "responses": {
          "200": {
            "description": "Top 10 Users Retrieved Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Top 10 users retrieved successfully."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Ranking"
                      },
                      "minItems": 0,
                      "maxItems": 10
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Internal server error."
                }
              }
            }
          }
        }
      }
    },
    "/ranking/monthly/{year}/{month}": {
      "get": {
        "tags": [
          "Ranking"
        ],
        "summary": "Get monthly ranking for a given month and year",
        "description": "Returns the top 10 users in the monthly ranking for a given month and year along with their profile information.",
        "parameters": [
          {
            "name": "year",
            "in": "path",
            "description": "Year(number). The year being > than the current year  will lead to a 400 Error.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "month",
            "in": "path",
            "description": "Month(number from 1-12, single digits). Month < 12 will lead to a 400 error.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Received top 10 users (highest score) for specified month and year",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Top 10 users retrieved successfully for given month and year."
                    },
                    "year": {
                      "type": "integer",
                      "example": 2023
                    },
                    "month": {
                      "type": "integer",
                      "example": 3
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Ranking"
                      },
                      "minItems": 0,
                      "maxItems": 10
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Invalid request. Month and year must be valid numbers."
                }
              }
            }
          },
          "500": {
            "description": "Internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Internal server error."
                }
              }
            }
          }
        }
      }
    },
    "/user/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 1
          },
          "description": "The ID of the user to delete."
        }
      ],
      "delete": {
        "security": [
          {
            "google_oauth": []
          }
        ],
        "tags": [
          "user"
        ],
        "summary": "Delete all user data. (game history, profile, scores)",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "User sucessfully deleted."
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Id is not in valid format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Invalid ID. Must be a number."
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Unauthenticated."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Unauthorized."
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "User not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Internal server error."
                }
              }
            }
          }
        }
      }
    },
    "/user/{id}/profile": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 1
          },
          "description": "The ID of the user profile."
        }
      ],
      "get": {
        "security": [
          {
            "google_oauth": []
          }
        ],
        "tags": [
          "Profile"
        ],
        "summary": "Get the user's profile information",
        "description": "Retrieves the profile for the specified id (the user).Profiles can be set private. Profiles will only be delivered to authenticated users. If the profile is private, but the user is the owner, the profile will be delivered anyways.",
        "responses": {
          "200": {
            "description": "Successfully retrieved user profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Invalid ID. Must be a number."
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Unauthenticated."
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized - profile is private. (If the authenticated user is the owner he won't receive this error.)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Unauthorized - profile is private."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Profile not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Internal server error."
                }
              }
            }
          }
        }
      }
    },
    "/user/{id}/stats": {
      "get": {
        "summary": "Gets user statistics.",
        "description": "Retrieves statistics for a specific user. Most played games. Total time played, ...",
        "security": [
          {
            "google_oauth": []
          }
        ],
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag value for caching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserStats"
                }
              }
            }
          },
          "304": {
            "description": "Not Modified - ETag matches.",
            "content": {
              "application/json": {
                "example": {
                  "message": "No changes since the last request."
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Unauthenticated."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Only the user himself is allowed to look at his statistics.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Forbidden."
                }
              }
            }
          },
          "404": {
            "description": "User Not Found",
            "content": {
              "application/json": {
                "example": {
                  "message": "User not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "message": "Internal server error."
                }
              }
            }
          }
        }
      }
    },
    "/profile": {
      "post": {
        "tags": [
          "Profile"
        ],
        "summary": "Create a profile for the currently authenticated user. [DEPRECATED]",
        "description": "User profile gets created on Signup, this endpoint will always return 409 - Conflict since a profile already exists for a signed up user.",
        "security": [
          {
            "google_oauth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileUpdate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created user profile for the authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request body validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileViolation"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Unauthenticated."
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Profile already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "A profile already exists for this user."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Internal server error."
                }
              }
            }
          }
        }
      }
    },
    "/profile/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 1
          },
          "description": "The ID of the user profile."
        }
      ],
      "get": {
        "security": [
          {
            "google_oauth": []
          }
        ],
        "tags": [
          "Profile"
        ],
        "summary": "Get the profile information",
        "responses": {
          "200": {
            "description": "Successfully retrieved user profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Unauthenticated."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "message": "Forbidden."
                }
              }
            }
          },
          "404": {
            "description": "Profile not found.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Profile not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "message": "Internal server error."
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Profile"
        ],
        "description": "User profile gets created on Signup. The created profile can be updated. All fields in the body if request are optional. Only set values will be updated. An empty body is not allowed (400). Invalid fields will result in a 400 error. Length limit contraint violations also result in a 400 response.",
        "security": [
          {
            "google_oauth": []
          }
        ],
        "summary": "Update an existing profile (only owner of the profile is allowed to do so)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request body validation failed or body is empty.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ProfileViolation"
                    },
                    {
                      "$ref": "#/components/schemas/MessageResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Unauthenticated."
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "message": "Forbidden."
                }
              }
            }
          },
          "404": {
            "description": "Profile not found.",
            "content": {
              "application/json": {
                "example": {
                  "message": "User not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "message": "Internal server error."
                }
              }
            }
          }
        }
      }
    },
    "/game": {
      "post": {
        "tags": [
          "Game"
        ],
        "summary": "Create a new game",
        "description": "Creates a new game with a random country based on the chosen difficulty level. The Game will live for ttl seconds after that the game is deleted and can not be accessed. If the ttl expires the game will not be saved in the game history of a player.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "difficulty": {
                    "type": "string",
                    "enum": [
                      "easy",
                      "medium",
                      "hard"
                    ],
                    "example": "easy"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Game Created Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Game"
                }
              }
            },
            "links": {
              "nextStep": {
                "description": "Retrieve facts for the newly created game.",
                "operationRef": "#/paths/~1game~1{id}~1facts/get",
                "parameters": {
                  "id": "$response.body#/id"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "example": {
                  "message": "Invalid Request"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "example": {
                  "message": "Game is already in session."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "message": "Internal server error."
                }
              }
            }
          }
        }
      }
    },
    "/game/{id}": {
      "get": {
        "tags": [
          "Game"
        ],
        "summary": "Retrieve a game",
        "description": "Retrieves the details of a game by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Game details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Game"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Forbidden - user is not the player of the game"
          },
          "404": {
            "description": "Game not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Game"
        ],
        "summary": "Cancel a game",
        "description": "Cancels a game session by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Game successfully cancelled. No content."
          },
          "403": {
            "description": "Forbidden. User is only allowed to delete their own games.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Can not delete games of other player"
                }
              }
            }
          },
          "404": {
            "description": "Game in no active session found.",
            "content": {
              "application/json": {
                "example": {
                  "message": "Game not found in session."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/game/{id}/facts": {
      "get": {
        "tags": [
          "Game"
        ],
        "summary": "Retrieve the facts for the country of the game.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Game facts retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Facts to guess the country."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Facts"
                    }
                  }
                }
              }
            },
            "links": {
              "nextStep": {
                "description": "Retrieve facts for the newly created game.",
                "operationRef": "/game/{id}/rating/facts",
                "parameters": {
                  "id": "$response.body#/id"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Forbidden. User is not player of the game.",
            "content": {
              "application/json": {
                "example": {
                  "message": "This is not your game"
                }
              }
            }
          },
          "404": {
            "description": "Game not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/game/{id}/rating/facts": {
      "post": {
        "tags": [
          "Game"
        ],
        "summary": "Rating of first round of the game",
        "operationId": "getRatingRoundOne",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/Answers"
                  }
                }
              }
            }
          }
        },
        "description": "Returns scoring for first round",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "score": {
                      "type": "integer",
                      "description": "scoring from the first round"
                    }
                  }
                }
              }
            },
            "links": {
              "nextStep": {
                "description": "get to the geo-onformation round",
                "operationRef": "/game/{id}/geo-information",
                "parameters": {
                  "id": "$response.body#/id"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. User is not player of the game.",
            "content": {
              "application/json": {
                "example": {
                  "message": "This is not your game."
                }
              }
            }
          },
          "404": {
            "description": "Game not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/game/{id}/geo-information": {
      "get": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "second round of the game",
        "operationId": "getRoundTwo",
        "description": "Get the coordinates for the country and its center",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "geometry": {
                      "$ref": "#/components/schemas/Geo-Information",
                      "description": "Complete OSM Request incl. boundaries of the country"
                    },
                    "center": {
                      "type": "object",
                      "properties": {
                        "lat": {
                          "type": "number"
                        },
                        "lon": {
                          "type": "number"
                        }
                      },
                      "description": "lat and lon of the center of the country"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/game/{id}/rating/geo-information": {
      "post": {
        "tags": [
          "Game"
        ],
        "operationId": "getRatingRoundTwo",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "time": {
                    "type": "integer",
                    "description": "time needed for second round"
                  },
                  "guessed_position": {
                    "type": "object",
                    "properties": {
                      "lat": {
                        "type": "number"
                      },
                      "lon": {
                        "type": "number"
                      }
                    },
                    "description": "lat and lon of guessed coordinate"
                  },
                  "center": {
                    "type": "object",
                    "properties": {
                      "lat": {
                        "type": "number"
                      },
                      "lon": {
                        "type": "number"
                      }
                    },
                    "description": "lat and lon of the center of the country"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Rating of second round of the game",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "distance": {
                      "type": "integer",
                      "description": "distance in km between guessed Position and the Center of a Country with the Haversine-Formela"
                    },
                    "score": {
                      "type": "integer",
                      "description": "scoring from the second round"
                    }
                  }
                }
              }
            },
            "links": {
              "nextStep": {
                "description": "Link for next round with id of game and the center of the country",
                "operationRef": "/game/sights",
                "parameters": {
                  "id": "$request.path.game_id",
                  "center": "Â§request.center"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Game Not Found"
          },
          "406": {
            "description": "Not Acceptable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/game/{id}/sights": {
      "get": {
        "tags": [
          "Game"
        ],
        "operationId": "getThirdRound",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Third round of LÃ¤nderspiel",
        "description": "Three sights of 3 cities. The player has to guess the cites based on the provided sights.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "city_name": {
                      "type": "string",
                      "description": "name of the city"
                    },
                    "sights": {
                      "type": "array",
                      "minItems": 3,
                      "maxItems": 3,
                      "items": {
                        "$ref": "#/components/schemas/City"
                      }
                    }
                  }
                }
              }
            },
            "links": {
              "nextStep": {
                "description": "rate geo-information",
                "operationRef": "/game/{id}/rating/sights",
                "parameters": {
                  "id": "$response.body#/id"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/game/{id}/rating/sights": {
      "post": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "time_to_complete": {
                    "type": "integer",
                    "example": 100
                  },
                  "city_1": {
                    "type": "object",
                    "properties": {
                      "coordinates": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "format": "float",
                          "example": 10.5
                        },
                        "minItems": 2,
                        "maxItems": 2
                      },
                      "guessed_coordinates": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "format": "float",
                          "example": 10.5
                        },
                        "minItems": 2,
                        "maxItems": 2
                      },
                      "sights": {
                        "type": "integer",
                        "example": 2
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Rating of third round of the game",
        "description": "Scoring of the final round. Since the round completes the game, the time of the users attempt will also be used for scoring the whole game.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "score": {
                      "type": "integer",
                      "description": "scoring from the third round"
                    }
                  }
                }
              }
            },
            "links": {
              "next": {
                "operationId": "Get next page for scoreboard",
                "parameters": {
                  "artifact-id": "/game/scoreboard"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - e.g. wrong coordinate formatting."
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Game not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/{id}/played-games": {
      "get": {
        "tags": [
          "Gamehistory"
        ],
        "security": [
          {
            "google_oauth": []
          }
        ],
        "summary": "Get list of played games by user (a.k.a game history).",
        "description": "Returns a paginated list of all the games a user has played, ordered by the most recent first. This endpoint will only return data if the user's profile is not set to private.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated array of played games",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPlayedGamesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Invalid ID. Must be a number."
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated. Only authenticated users are allowed to look at public profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Unauthenticated."
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Unauthorized - profile is private - this applies to game history too."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "User not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Internal server error."
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Gamehistory"
        ],
        "security": [
          {
            "google_oauth": []
          }
        ],
        "summary": "Delete all played games by user.",
        "description": "Deletes ALL the games a user has played (clears game history). Only the owner of the history can perform this operation. The overall score is reset to 0 and monthly rankings are also deleted.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion - deletedNum is the total number of deleted played Games.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deletedNum": {
                      "type": "integer",
                      "description": "Number of deleted records",
                      "example": 16
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Invalid ID. Must be a number."
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated. Must be authenticated in order to be authorised to perform action.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Unauthenticated."
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Unauthorized - user is not the owner."
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "User not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "example": {
                  "message": "Internal server error."
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Answers": {
        "type": "object",
        "properties": {
          "time": {
            "type": "integer"
          },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FactAnswers"
            },
            "minItems": 7,
            "maxItems": 7
          },
          "flag": {
            "type": "boolean"
          }
        }
      },
      "FactAnswers": {
        "type": "object",
        "properties": {
          "answer": {
            "type": "string"
          },
          "question_keyword": {
            "type": "string"
          },
          "tries": {
            "type": "integer"
          }
        }
      },
      "Facts": {
        "type": "object",
        "properties": {
          "country_name": {
            "type": "string"
          },
          "facts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountryFacts"
            },
            "minItems": 7,
            "maxItems": 7
          },
          "flags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlagOption"
            },
            "minItems": 3,
            "maxItems": 3
          }
        }
      },
      "CountryFacts": {
        "type": "object",
        "properties": {
          "question_keyword": {
            "type": "string"
          },
          "answer": {
            "type": "string"
          }
        }
      },
      "FlagOption": {
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string"
          },
          "flag_url": {
            "type": "string"
          },
          "correct_option": {
            "type": "boolean"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "username": {
            "type": "string",
            "example": "user1"
          },
          "registrationDate": {
            "type": "string",
            "format": "date-time",
            "example": "2022-01-01T00:00:00Z"
          },
          "lastLoginDate": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T00:00:00Z"
          }
        }
      },
      "Ranking": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1297459
          },
          "score": {
            "type": "integer",
            "example": 15000
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-01T00:00:00Z"
          },
          "username": {
            "type": "string",
            "example": "john_doe2"
          },
          "user_id": {
            "type": "integer",
            "example": 123132
          }
        }
      },
      "Profile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "firstName": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50,
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50,
            "example": "Doe"
          },
          "bio": {
            "type": "string",
            "maxLength": 500,
            "example": "Hi, this is John Doe.",
            "default": "Hi there!"
          },
          "location": {
            "type": "string",
            "maxLength": 100,
            "example": "Alabama"
          },
          "isPrivate": {
            "type": "boolean",
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProfileUpdate": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50,
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "minLength": 2,
            "maxLength": 50,
            "example": "Doe"
          },
          "bio": {
            "type": "string",
            "maxLength": 500,
            "example": "Hi, this is John Doe.",
            "default": "Hi there!"
          },
          "location": {
            "type": "string",
            "maxLength": 100,
            "example": "Buffalo"
          },
          "isPrivate": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "Game": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1341251235
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "example": 198374918
          },
          "current_round": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "max_rounds": {
            "type": "integer",
            "format": "int32",
            "example": 3
          },
          "ttl": {
            "type": "integer",
            "format": "int32",
            "description": "Time to live in seconds",
            "example": 900
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-06-02T16:00:00Z"
          },
          "difficulty": {
            "type": "number",
            "format": "float",
            "example": 1
          },
          "country_id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "country_name": {
            "type": "string",
            "example": "Mexico"
          },
          "current_score": {
            "type": "integer",
            "example": 143,
            "nullable": true
          },
          "total_score": {
            "type": "integer",
            "example": 1045,
            "nullable": true
          }
        }
      },
      "PlayedGame": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "example": 123
          },
          "score": {
            "type": "integer",
            "format": "int32",
            "example": 500
          },
          "gameDuration": {
            "type": "integer",
            "format": "int32",
            "example": 120
          },
          "country": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int32",
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "Germany"
              },
              "countryCode": {
                "type": "string",
                "example": "DE"
              },
              "difficultyMultiplier": {
                "type": "number",
                "format": "float",
                "example": 1.5
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-06-01T10:30:00Z"
          }
        }
      },
      "PaginatedPlayedGamesResponse": {
        "type": "object",
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 100
          },
          "totalPages": {
            "type": "integer",
            "example": 5
          },
          "currentPage": {
            "type": "integer",
            "example": 2
          },
          "pageSize": {
            "type": "integer",
            "example": 20
          },
          "playedGames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayedGame"
            }
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string",
                    "example": "http://localhost:8000/user/13/played-games?page=1&pageSize=5"
                  }
                }
              },
              "next": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string",
                    "example": "http://localhost:8000/user/13/played-games?page=2&pageSize=5"
                  }
                }
              },
              "prev": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string",
                    "example": null
                  }
                }
              }
            }
          }
        },
        "required": [
          "totalItems",
          "totalPages",
          "currentPage",
          "pageSize",
          "playedGames",
          "_links"
        ]
      },
      "Sight": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "image": {
            "type": "string"
          }
        }
      },
      "City": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "sights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sight",
              "minItems": 3,
              "maxItems": 3
            }
          },
          "coordinates": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProfileViolation": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "enum": [
              "Length Limit Violation",
              "Empty Request Body",
              "Invalid Field(s)"
            ],
            "description": "Error type indicating a length limit violation or an empty request body"
          },
          "message": {
            "type": "string",
            "description": "Description of the error (length limit violation or empty request body, or the contained invalid field(s))"
          },
          "violations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string",
                  "description": "The field that violated the length limit"
                },
                "minLength": {
                  "type": "integer",
                  "description": "The minimum allowed length for the field"
                },
                "maxLength": {
                  "type": "integer",
                  "description": "The maximum allowed length for the field"
                },
                "actualLength": {
                  "type": "integer",
                  "description": "The actual length of the field value that exceeded the limit"
                }
              }
            },
            "description": "Array of length limit violations"
          }
        },
        "required": [
          "error",
          "message"
        ],
        "example": {
          "error": "Length Limit Violation",
          "message": "One or more fields violated the length limit",
          "violations": [
            {
              "field": "firstName",
              "minLength": 2,
              "maxLength": 50,
              "actualLength": 1
            },
            {
              "field": "lastName",
              "minLength": 2,
              "maxLength": 50,
              "actualLength": 1
            }
          ]
        }
      },
      "ProfileAlreadyExistsError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "enum": [
              "Profile Already Exists"
            ],
            "description": "Error type indicating that the profile already exists"
          },
          "message": {
            "type": "string",
            "description": "Description of the error"
          }
        },
        "required": [
          "error",
          "message"
        ],
        "example": {
          "error": "Profile Already Exists",
          "message": "A profile already exists for the user. Use put to update the users profile."
        }
      },
      "CountrySummary": {
        "type": "object",
        "properties": {
          "CountryId": {
            "type": "integer"
          },
          "CountryName": {
            "type": "string"
          },
          "Amount": {
            "type": "integer"
          },
          "AverageScore": {
            "type": "integer"
          },
          "AverageTime": {
            "type": "integer"
          }
        }
      },
      "UserStats": {
        "type": "object",
        "properties": {
          "TotalGamesPlayed": {
            "type": "integer"
          },
          "TotalTimePlayed": {
            "type": "integer"
          },
          "FastestGame": {
            "$ref": "#/components/schemas/PlayedGame"
          },
          "SlowestGame": {
            "$ref": "#/components/schemas/PlayedGame"
          },
          "AllTimeRankingEntry": {
            "$ref": "#/components/schemas/Ranking"
          },
          "CountryGameSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountrySummary"
            }
          }
        }
      },
      "MessageResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A message indicating the outcome"
          }
        }
      },
      "Geo-Information": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number"
          },
          "generator": {
            "type": "string"
          },
          "osm3s": {
            "type": "object",
            "properties": {
              "timestamp_osm_base": {
                "type": "string"
              },
              "copyright": {
                "type": "string"
              }
            }
          },
          "elements": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "id": {
                  "type": "number"
                },
                "bounds": {
                  "type": "object",
                  "properties": {
                    "minlat": {
                      "type": "number"
                    },
                    "minlon": {
                      "type": "number"
                    },
                    "maxlat": {
                      "type": "number"
                    },
                    "maxlon": {
                      "type": "number"
                    }
                  }
                },
                "members": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "ref": {
                        "type": "number"
                      },
                      "role": {
                        "type": "string"
                      },
                      "geometry": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "lat": {
                              "type": "number"
                            },
                            "lon": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "google_oauth": {
        "type": "oauth2",
        "description": "Google OAuth",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/oauth/authorize",
            "tokenUrl": "/oauth/token",
            "scopes": {}
          }
        }
      }
    }
  }
}