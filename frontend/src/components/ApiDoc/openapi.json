{
  "openapi": "3.0.3",
  "info": {
    "title": "LÃ¤nderspiel (nicht Fussball)",
    "description": "This API provides a trivia game that tests the players knowledge about countries.\nEach round of the game consists of different kind of questions. \nThe player answers the questions and earns points based on conditions, such as the amount of attempts that were needed. \nThe API keeps track of the players score.",
    "version": "2.0.69"
  },
  "tags": [
    {
      "name": "Game",
      "description": "Operations about the game"
    },
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "Ranking",
      "description": "Operations about ranking"
    },
    {
      "name": "Gamehistory",
      "description": "Operations about played games of a specific user."
    },
    {
      "name": "Profile",
      "description": "Operations about the public or private profile of a specific user."
    }
  ],
  "paths": {
    "/signup": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Sign up with 3rd party OAuth and return JWT Token for authentication.",
        "description": "Creates a new user account using a 3rd party OAuth provider. The username is derived from the users E-Mail adress.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "access_token": {
                    "type": "string",
                    "description": "Access token provided by the OAuth provider"
                  },
                  "email": {
                    "type": "string",
                    "description": "E-Mail address of the users oAuth provider account"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created and authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Created and authenticated user successfully."
                    },
                    "token": {
                      "type": "string",
                      "description": "JWT token for user authentication",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            },
            "links": {
              "CreateProfile": {
                "description": "Create your profile after signing up",
                "operationRef": "#/profile"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Username is already taken"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Authenticate user",
        "description": "Authenticates user with third-party authentication provider",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "access_token": {
                    "type": "string",
                    "description": "Access token returned from third-party authentication provider"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "JWT token for user authentication",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Log out the current user",
        "description": "This endpoint logs out the current user and invalidates their session token.\n",
        "responses": {
          "200": {
            "description": "Successfully logged out",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged out."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (user not logged in)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "failed"
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ranking/all-time": {
      "get": {
        "tags": [
          "Ranking"
        ],
        "summary": "Retrieve the top 10 users in all-time ranking",
        "description": "This endpoint returns the top 10 users with the highest all-time score, along with their user info.",
        "responses": {
          "200": {
            "description": "Top 10 Users Retrieved Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Top 10 users retrieved successfully."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Ranking"
                      },
                      "minItems": 0,
                      "maxItems": 10
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/ranking/monthly/{year}/{month}": {
      "get": {
        "tags": [
          "Ranking"
        ],
        "summary": "Get monthly ranking for a given month and year",
        "description": "Returns the top 10 users in the monthly ranking for a given month and year along with their profile information.",
        "parameters": [
          {
            "name": "year",
            "in": "path",
            "description": "Year in the format of 'yyyy'",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "month",
            "in": "path",
            "description": "Month in the format of 'mm'",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Received top 10 users (highest score) for specified month and year",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Top 10 users for specified timeframe retrieved successfully."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Ranking"
                      },
                      "minItems": 0,
                      "maxItems": 10
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/profile/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 1
          },
          "description": "The ID of the user profile."
        }
      ],
      "get": {
        "security": [
          {
            "google_oauth": []
          }
        ],
        "tags": [
          "Profile"
        ],
        "summary": "Get the user's profile information",
        "responses": {
          "200": {
            "description": "Successfully retrieved user profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "204": {
            "description": "Profile is empty"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthenticated"
          },
          "403": {
            "description": "Unauthorized - user profile is private"
          },
          "404": {
            "description": "Profile Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "Profile"
        ],
        "security": [
          {
            "google_oauth": []
          }
        ],
        "summary": "Create a new user profile",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileUpdate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created user profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Profile"
        ],
        "security": [
          {
            "google_oauth": []
          }
        ],
        "summary": "Update an existing user profile",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Profile Not Found"
          }
        }
      }
    },
    "/game": {
      "post": {
        "tags": [
          "Game"
        ],
        "summary": "Create a new game",
        "description": "Creates a new game with a random country based on the chosen difficulty level.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "difficulty": {
                    "type": "string",
                    "enum": [
                      "easy",
                      "medium",
                      "hard"
                    ],
                    "example": "easy"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Game Created Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Game"
                }
              }
            },
            "links": {
              "nextStep": {
                "description": "Retrieve facts for the newly created game.",
                "operationRef": "#/paths/~1game~1{id}~1facts/get",
                "parameters": {
                  "id": "$response.body#/id"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/game/{id}": {
      "get": {
        "tags": [
          "Game"
        ],
        "summary": "Retrieve a game",
        "description": "Retrieves the details of a game by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Game details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Game"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Unauthorized - user is not the player of the game"
          },
          "404": {
            "description": "Game not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Game"
        ],
        "summary": "Cancel a game",
        "description": "Cancels a game session by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Game successfully cancelled. No content."
          },
          "401": {
            "description": "Unauthorized. User doesn't have the necessary credentials for the resource that is being requested."
          },
          "404": {
            "description": "Game not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/game/{id}/facts": {
      "get": {
        "tags": [
          "Game"
        ],
        "summary": "Retrieve the facts for the country of the game.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the game.",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Game facts retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Facts to guess the country."
                    },
                    "data": {
                      "$ref": "#/components/schemas/Facts"
                    }
                  }
                }
              }
            },
            "links": {
              "nextStep": {
                "description": "Retrieve facts for the newly created game.",
                "operationRef": "/game/{id}/rating/facts",
                "parameters": {
                  "id": "$response.body#/id"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "403": {
            "description": "Unauthorized - user is not the player of the game"
          },
          "404": {
            "description": "Game not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/game/{id}/rating/facts": {
      "post": {
        "tags": [
          "Game"
        ],
        "summary": "Rating of first round of the game",
        "operationId": "getRatingRoundOne",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "guest_token": {
                    "type": "string",
                    "description": "Optional access token for guest users"
                  },
                  "data": {
                    "$ref": "#/components/schemas/Facts"
                  }
                }
              }
            }
          }
        },
        "description": "Returns scoring for first round",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "score": {
                      "type": "integer",
                      "description": "scoring from the first round"
                    }
                  }
                }
              }
            },
            "links": {
              "nextStep": {
                "description": "get to the geo-onformation round",
                "operationRef": "/game/{id}/geo-information",
                "parameters": {
                  "id": "$response.body#/id"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Game not Found"
          },
          "406": {
            "description": "Not Acceptable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/game/{id}/geo-information": {
      "get": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "second round of the game",
        "operationId": "getRoundTwo",
        "description": "Get the coordinates for the country and its center",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "geometry": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "boundaries of the country"
                    },
                    "center": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "lat and lng of the center of the countryt"
                    }
                  }
                }
              }
            },
            "links": {
              "nextStep": {
                "description": "rate geo-information",
                "operationRef": "/game/{id}/rating/geo-information",
                "parameters": {
                  "id": "$response.body#/id"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/game/{id}/rating/geo-information": {
      "post": {
        "tags": [
          "Game"
        ],
        "operationId": "getRatingRoundTwo",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "unauthorized user id"
                  },
                  "coordinate": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "lat and lng of guessed coordinate"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "ID of the game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Rating of second round of the game",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "score": {
                      "type": "integer",
                      "description": "scoring from the second round"
                    }
                  }
                }
              }
            },
            "links": {
              "next": {
                "operationId": "getThirdRound",
                "parameters": {
                  "game_id": "$request.path.game_id"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Game Not Found"
          },
          "406": {
            "description": "Not Acceptable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/game/{id}/sights": {
      "get": {
        "tags": [
          "Game"
        ],
        "operationId": "getThirdRound",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Third round of LÃ¤nderspiel",
        "description": "Displaying three sights of 3 cities. The player has to guess the cites based on the provided sights.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "city_name": {
                      "type": "string",
                      "description": "name of the city"
                    },
                    "sights": {
                      "type": "array",
                      "minItems": 3,
                      "maxItems": 3,
                      "items": {
                        "$ref": "#/components/schemas/Sight"
                      }
                    }
                  }
                }
              }
            },
            "links": {
              "nextStep": {
                "description": "rate geo-information",
                "operationRef": "/game/{id}/rating/sights",
                "parameters": {
                  "id": "$response.body#/id"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/game/{id}/rating/sights": {
      "post": {
        "tags": [
          "Game"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a game",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "guest_token": {
                    "type": "string",
                    "description": "Optional access token for guest users"
                  },
                  "city_name": {
                    "type": "string",
                    "description": "Name of the city guessed"
                  }
                }
              }
            }
          }
        },
        "summary": "Rating of third round of the game",
        "description": "Returns scoring for third round",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/hal+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "score": {
                      "type": "integer",
                      "description": "scoring from the third round"
                    }
                  }
                }
              }
            },
            "links": {
              "next": {
                "operationId": "Get next page for scoreboard",
                "parameters": {
                  "artifact-id": "/game/scoreboard"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Game not Found"
          },
          "406": {
            "description": "Not Acceptable"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/{id}/played-games": {
      "get": {
        "tags": [
          "Gamehistory"
        ],
        "security": [
          {
            "google_oauth": []
          }
        ],
        "summary": "Get list of played games by user (a.k.a game history).",
        "description": "Returns a paginated list of all the games a user has played, ordered by the most recent first. This endpoint will only return data if the user's profile is not set to private.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated array of played games",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPlayedGamesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID or page parameters supplied"
          },
          "401": {
            "description": "Only authenticated users are allowed to look at the game history."
          },
          "403": {
            "description": "Unauthorized - the profile is set to private, therefore the game history is private too."
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Gamehistory"
        ],
        "security": [
          {
            "google_oauth": []
          }
        ],
        "summary": "Delete all played games by user.",
        "description": "Deletes all the games a user has played. Only the owner of the games can perform this operation. The overall score is NOT affected by the deletion. The user will still show up within rankings if the score is high enough.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Facts": {
        "type": "object",
        "properties": {
          "country_name": {
            "type": "string"
          },
          "facts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountryFacts"
            },
            "minItems": 7,
            "maxItems": 7
          },
          "flags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlagOption"
            },
            "minItems": 3,
            "maxItems": 3
          }
        }
      },
      "CountryFacts": {
        "type": "object",
        "properties": {
          "question_keyword": {
            "type": "string"
          },
          "answer": {
            "type": "string"
          }
        }
      },
      "FlagOption": {
        "type": "object",
        "properties": {
          "country_code": {
            "type": "string"
          },
          "flag_url": {
            "type": "string"
          },
          "correct_option": {
            "type": "boolean"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "username": {
            "type": "string",
            "example": "user1"
          },
          "registrationDate": {
            "type": "string",
            "format": "date-time",
            "example": "2022-01-01T00:00:00Z"
          },
          "lastLoginDate": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T00:00:00Z"
          }
        }
      },
      "Ranking": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1297459
          },
          "score": {
            "type": "integer",
            "example": 15000
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-01T00:00:00Z"
          },
          "username": {
            "type": "string",
            "example": "john_doe2"
          },
          "user_id": {
            "type": "integer",
            "example": 123132
          }
        }
      },
      "Profile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isPrivate": {
            "type": "boolean"
          }
        }
      },
      "ProfileUpdate": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "isPrivate": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "Game": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1341251235
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "example": 198374918
          },
          "current_round": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "max_rounds": {
            "type": "integer",
            "format": "int32",
            "example": 3
          },
          "ttl": {
            "type": "integer",
            "format": "int32",
            "description": "Time to live in seconds",
            "example": 900
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-06-02T16:00:00Z"
          },
          "difficulty": {
            "type": "number",
            "format": "float",
            "example": 1
          },
          "country_id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "current_score": {
            "type": "integer",
            "example": 143,
            "nullable": true
          },
          "total_score": {
            "type": "integer",
            "example": 1045,
            "nullable": true
          }
        }
      },
      "PlayedGame": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "example": 123
          },
          "score": {
            "type": "integer",
            "format": "int32",
            "example": 500
          },
          "gameDuration": {
            "type": "integer",
            "format": "int32",
            "example": 120
          },
          "country": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int32",
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "Germany"
              },
              "countryCode": {
                "type": "string",
                "example": "DE"
              },
              "difficultyMultiplier": {
                "type": "number",
                "format": "float",
                "example": 1.5
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-06-01T10:30:00Z"
          }
        }
      },
      "PaginatedPlayedGamesResponse": {
        "type": "object",
        "properties": {
          "totalItems": {
            "type": "integer",
            "example": 100
          },
          "totalPages": {
            "type": "integer",
            "example": 5
          },
          "currentPage": {
            "type": "integer",
            "example": 2
          },
          "pageSize": {
            "type": "integer",
            "example": 20
          },
          "playedGames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayedGame"
            }
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string",
                    "example": "/user/123/played-games?page=2&pageSize=20"
                  }
                }
              },
              "next": {
                "type": "object",
                "properties": {
                  "href": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "Sight": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "image": {
            "type": "string",
            "example": "/user/123/played-games?page=3&pageSize=20"
          }
        }
      }
    },
    "securitySchemes": {
      "google_oauth": {
        "type": "oauth2",
        "description": "Google OAuth",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/oauth/authorize",
            "tokenUrl": "/oauth/token",
            "scopes": {}
          }
        }
      }
    }
  }
}