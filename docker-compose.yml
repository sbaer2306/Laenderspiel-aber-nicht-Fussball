version: "3.4"

x-common-variables: &common-variables
  MYSQL_USER: laenderspiel
  MYSQL_PASSWORD: laenderspiel
  MYSQL_DATABASE: laenderspiel
  REACT_APP_SERVER_PORT: 8000
  REDIS_PASSWORD: DieZeugenSeehofers2023

services:
  mysql-db:
    image: mysql:5.7
    container_name: mysql_container
    environment:
      <<: *common-variables
      MYSQL_HOST: localhost
      MYSQL_ROOT_PASSWORD: root
    ports:
      - 3306:3306
    restart: unless-stopped
    volumes:
      - ./db/sample.sql:/docker-entrypoint-initdb.d/sample.sql
  phpmyadmin:
    depends_on:
      - mysql-db
    image: phpmyadmin/phpmyadmin
    container_name: phpadmin_container
    environment:
      PMA_HOST: mysql-db
    links:
      - mysql-db:mysql-db
    ports:
      - 8080:80
    restart: always
  backend:
    build: ./backend
    container_name: node_backend_container
    depends_on:
      - mysql-db
      - redis
    environment:
      <<: *common-variables
      MYSQL_HOST_IP: mysql-db
      DATABASE_URL: "mysql://root:root@mysql-db:3306/laenderspiel"
      REDIS_HOST: redis-db
      REDIS_PORT: 6379
    ports:
      - 8000:8000
    volumes:
      - ./backend:/app
    links:
      - mysql-db
      - redis
    command: >
      sh -c "
        while ! nc -z mysql-db 3306; do
          echo 'Waiting for the database to become available...'
          sleep 1
        done
        npx prisma db push --accept-data-loss &&
        npm start
      "
  frontend:
    build: ./frontend
    container_name: frontend_container
    environment:
      <<: *common-variables
      NODE_PATH: src
    ports:
      - 3000:3000
    volumes:
      - ./frontend/src:/app/src
    links:
      - backend
    command: npm run dev -- --port 3000 --host 0.0.0.0
  redis:
    image: redis:latest
    container_name: redis-db
    command: redis-server --requirepass DieZeugenSeehofers2023
    ports:
      - 6379:6379
    restart: unless-stopped